name: Build GUI
on:
  push:
  pull_request:
  release:
    types: [published]
 
env:
  TAG: ${{ github.ref }}

jobs:

# Common Build matrix for builds on Ubuntu Lasted VM       
  ubuntu_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
      
        # Add more compilers here if you need them
        build_name: ['Ubuntu 20.04 - GCC 9', 'Ubuntu 20.04 - GCC 10']
        include:
          - build_name: 'Ubuntu 20.04 - GCC 9'
            package_name: 'gcc-9 g++-9'
            cc: gcc-9
            cxx: g++-9
            label: ubuntu-20.04
            deployable: true
          - build_name: 'Ubuntu 20.04 - GCC 10'
            package_name: 'gcc-10 g++-10'
            cc: gcc-10
            cxx: g++-10
            label: ubuntu-20.04-linux-gcc-10
            deployable: false
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v4

      # Checkout repository and submodules
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

       # Fetch Dependencies
      - name: Dependencies
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt-get install -y curl build-essential python3-dev autotools-dev libicu-dev libbz2-dev cmake git screen checkinstall zlib1g-dev fuse libfuse2 libxcb-xinerama0 ${{ matrix.package_name }}   

      # Install Boost 
      - name: Install Boost
        run: |
          curl -OL https://boostorg.jfrog.io/artifactory/main/release/1.70.0/source/boost_1_70_0.tar.bz2
          tar -xjf boost_1_70_0.tar.bz2
          cd boost_1_70_0
          ./bootstrap.sh --with-libraries=system,filesystem,thread,date_time,chrono,regex,serialization,atomic,program_options,locale,timer,log
          ./b2
          cd ..

      # Install OpenSSH
      - name: Install OpenSSH
        run: |
          curl -OL https://www.openssl.org/source/openssl-1.1.1n.tar.gz
          tar xaf openssl-1.1.1n.tar.gz 
          cd openssl-1.1.1n/
          ./config --prefix=/home/runner/work/Infinium/Infinium/openssl --openssldir=/home/runner/work/Infinium/Infinium/openssl shared zlib
          make
          make install
          cd ..   

      # Setup Ccache    
      - name: Setup ccache
        run: |
          sudo apt install ccache

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '5.12.12'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          modules: 'debug_info qtcharts qtdatavis3d qtnetworkauth qtpurchasing qtscript qtvirtualkeyboard qtwebengine qtwebglplugin'
          
      # Retrieve Ccache   
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}     
     
     # Configure the project with cmake
      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake -D STATIC=TRUE -D BOOST_ROOT=/home/runner/work/Infinium/Infinium/boost_1_70_0 -D OPENSSL_ROOT_DIR=/home/runner/work/Infinium/Infinium/openssl -D CMAKE_PREFIX_PATH=/home/runner/work/Infinium/Qt/5.12.12/gcc_64 -D BUILD_GUI=ON -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF ..
      
      # Build for linux
      - name: Build
        run: |
          cd build
          make 
      
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          prj_root=$(pwd)
          
          echo Infinium Gui Tar.Gz
          
          cd build/src
          TARGETS="infiniumd connectivity_tool simplewallet infinium"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf Infinium-Gui-${TAG}
          mkdir Infinium-Gui-${TAG}
          cp ${TARGETS} Infinium-Gui-${TAG}/
          cp -r ../../src/gui/qt-daemon/layout/html Infinium-Gui-${TAG}/html
          cp ../../utils/buildings/linux/64bit/Infinium.sh Infinium-Gui-${TAG}/
          cp ../../utils/buildings/linux/64bit/Infinium.desktop Infinium-Gui-${TAG}/
          chmod 777 Infinium-Gui-${TAG}/Infinium.desktop
          chmod 777 Infinium-Gui-${TAG}/Infinium.sh
          mkdir Infinium-Gui-${TAG}/lib
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libicudata.so.56 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libicui18n.so.56 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libicuuc.so.56 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Core.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5DBus.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Gui.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Network.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5OpenGL.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Positioning.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5PrintSupport.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Qml.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Quick.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Sensors.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Sql.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Widgets.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5WebEngine.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5WebEngineCore.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5WebEngineWidgets.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5WebChannel.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5XcbQpa.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5QuickWidgets.so.5 Infinium-Gui-${TAG}/lib/  
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/libexec/QtWebEngineProcess Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/qtwebengine_resources.pak Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/qtwebengine_resources_100p.pak Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/qtwebengine_resources_200p.pak Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/icudtl.dat Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/qtwebengine_devtools_resources.pak Infinium-Gui-${TAG}/
          mkdir Infinium-Gui-${TAG}/lib/platforms
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/plugins/platforms/libqxcb.so Infinium-Gui-${TAG}/lib/platforms/
          mkdir Infinium-Gui-${TAG}/xcbglintegrations
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/plugins/xcbglintegrations/libqxcb-glx-integration.so Infinium-Gui-${TAG}/xcbglintegrations
          tar cvfz Infinium-Gui-${TAG}-${LABEL}.tar.gz Infinium-Gui-${TAG}/

          echo Infinium GUI AppImage
          
          rm -rf Infinium-GUI-${TAG}
          mkdir Infinium-GUI-${TAG}
          mkdir -p Infinium-GUI-${TAG}/usr/bin
          mkdir -p Infinium-GUI-${TAG}/usr/lib
          mkdir -p Infinium-GUI-${TAG}/usr/share/applications
          mkdir -p Infinium-GUI-${TAG}/usr/share/icons/hicolor/scalable/apps
          mkdir -p Infinium-GUI-${TAG}/usr/share/icons/hicolor/256x256/apps
          cp -r ../../src/gui/qt-daemon/layout/html Infinium-GUI-${TAG}/usr/bin/
          cp ${TARGETS} Infinium-GUI-${TAG}/usr/bin/       
          cp ../../utils/buildings/linux/64bit/Infinium.desktop Infinium-GUI-${TAG}/usr/share/applications/Infinium.desktop
          cp ../../resources/app_icon.svg Infinium-GUI-${TAG}/usr/share/icons/hicolor/scalable/apps/Infinium.svg
          cp ../../resources/app_icon_256.png Infinium-GUI-${TAG}/usr/share/icons/hicolor/256x256/apps/Infinium.png
          echo "Exec=$prj_root/build/src/Infinium-GUI-${TAG}/usr/bin/infinium" >> Infinium-GUI-${TAG}/usr/share/applications/Infinium.desktop
          rm -rf /home/runner/work/_temp/
          wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod 777 linuxdeployqt-continuous-x86_64.AppImage
          /home/runner/work/Infinium/Infinium/build/src/linuxdeployqt-continuous-x86_64.AppImage ./Infinium-GUI-${TAG}/usr/share/applications/Infinium.desktop -qmake=/home/runner/work/Infinium/Qt/5.12.12/gcc_64/bin/qmake      
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod 777 appimagetool-x86_64.AppImage
          rm -rf Infinium-GUI-${TAG}/AppRun
          cp ../../utils/buildings/linux/64bit/infinium_appimage_wrapper.sh Infinium-GUI-${TAG}/AppRun
          chmod 777 Infinium-GUI-${TAG}/*
          chmod 777 Infinium-GUI-${TAG}/*/*
          chmod 777 Infinium-GUI-${TAG}/*/*/*
          chmod 777 Infinium-GUI-${TAG}/*/*/*/*
          chmod 777 Infinium-GUI-${TAG}/*/*/*/*/*
          ARCH=x86_64 /home/runner/work/Infinium/Infinium/build/src/appimagetool-x86_64.AppImage ./Infinium-GUI-${TAG} Infinium-GUI-${TAG}-${LABEL}.AppImage
      
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Infinium-GUI-${{ github.event.release.tag_name }}-${{ env.LABEL }}.AppImage
          asset_name: Infinium-GUI-${{ github.event.release.tag_name }}-${{ env.LABEL }}.AppImage
          asset_content_type: application/octet-stream    

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-Gui-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Infinium-Gui-${{ github.sha }}   

      # Upload to GH Actions Artifacts AppData
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-GUI-${{ github.sha }}-${{ env.LABEL }}.AppImage
          path: ./build/src/Infinium-GUI-${{ github.sha }}-${{ env.LABEL }}.AppImage

  ubuntu_now_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
      
        # Add more compilers here if you need them
        build_name: ['Ubuntu 22.04 - GCC 11', 'Ubuntu 22.04 - GCC 12']
        include:
          - build_name: 'Ubuntu 22.04 - GCC 11'
            package_name: 'gcc-11 g++-11'
            cc: gcc-11
            cxx: g++-11
            label: ubuntu-22.04
            deployable: true
          - build_name: 'Ubuntu 22.04 - GCC 12'
            package_name: 'gcc-12 g++-12'
            cc: gcc-12
            cxx: g++-12
            label: ubuntu-22.04-linux-gcc-12
            deployable: false
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v4
      
      # Checkout repository and submodules
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive   

      # Fetch Dependencies
      - name: Dependencies
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt-get install -y curl build-essential python3-dev autotools-dev libicu-dev libbz2-dev cmake git screen checkinstall zlib1g-dev ${{ matrix.package_name }}
     
      # Install Boost
      - name: Install Boost
        run: |
          curl -OL https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.tar.bz2
          tar -xjf boost_1_76_0.tar.bz2
          cd boost_1_76_0
          ./bootstrap.sh --with-libraries=system,filesystem,thread,date_time,chrono,regex,serialization,atomic,program_options,locale,timer,log
          ./b2
          cd ..
          
      # Install OpenSSL
      - name: Install OpenSSL
        run: |
          curl -OL https://www.openssl.org/source/openssl-1.1.1n.tar.gz
          tar xaf openssl-1.1.1n.tar.gz 
          cd openssl-1.1.1n/
          ./config --prefix=/home/runner/work/Infinium/Infinium/openssl --openssldir=/home/runner/work/Infinium/Infinium/openssl shared zlib
          make
          make install
          cd ..

      # Install Ccache
      - name: Setup ccache
        run: |
          sudo apt install ccache

      # Install Qt   
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '5.12.12'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          modules: 'debug_info qtcharts qtdatavis3d qtnetworkauth qtpurchasing qtscript qtvirtualkeyboard qtwebengine qtwebglplugin'
        
      # Retrieve Ccache     
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}     
     
      # Configure the project with cmake
      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake -D STATIC=TRUE -D BOOST_ROOT=/home/runner/work/Infinium/Infinium/boost_1_76_0 -D OPENSSL_ROOT_DIR=/home/runner/work/Infinium/Infinium/openssl -D CMAKE_PREFIX_PATH=/home/runner/work/Infinium/Qt/5.12.12/gcc_64 -D BUILD_GUI=ON -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF ..
      
      # Build for linux
      - name: Build
        run: |
          cd build
          make

      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="infiniumd connectivity_tool simplewallet infinium"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf Infinium-Gui-${TAG}
          mkdir Infinium-Gui-${TAG}
          cp ${TARGETS} Infinium-Gui-${TAG}/
          cp -r ../../src/gui/qt-daemon/layout/html Infinium-Gui-${TAG}/html
          cp ../../utils/buildings/linux/64bit/Infinium.sh Infinium-Gui-${TAG}/
          cp ../../utils/buildings/linux/64bit/Infinium.desktop Infinium-Gui-${TAG}/
          chmod 777 Infinium-Gui-${TAG}/Infinium.desktop
          chmod 777 Infinium-Gui-${TAG}/Infinium.sh
          mkdir Infinium-Gui-${TAG}/lib
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libicudata.so.56 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libicui18n.so.56 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libicuuc.so.56 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Core.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5DBus.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Gui.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Network.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5OpenGL.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Positioning.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5PrintSupport.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Qml.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Quick.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Sensors.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Sql.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5Widgets.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5WebEngine.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5WebEngineCore.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5WebEngineWidgets.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5WebChannel.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5XcbQpa.so.5 Infinium-Gui-${TAG}/lib/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/lib/libQt5QuickWidgets.so.5 Infinium-Gui-${TAG}/lib/  
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/libexec/QtWebEngineProcess Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/qtwebengine_resources.pak Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/qtwebengine_resources_100p.pak Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/qtwebengine_resources_200p.pak Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/icudtl.dat Infinium-Gui-${TAG}/
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/resources/qtwebengine_devtools_resources.pak Infinium-Gui-${TAG}/
          mkdir Infinium-Gui-${TAG}/lib/platforms
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/plugins/platforms/libqxcb.so Infinium-Gui-${TAG}/lib/platforms/
          mkdir Infinium-Gui-${TAG}/xcbglintegrations
          cp /home/runner/work/Infinium/Qt/5.12.12/gcc_64/plugins/xcbglintegrations/libqxcb-glx-integration.so Infinium-Gui-${TAG}/xcbglintegrations
          tar cvfz Infinium-Gui-${TAG}-${LABEL}.tar.gz Infinium-Gui-${TAG}/
          
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-Gui-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Infinium-Gui-${{ github.sha }}

          

 # Mac builds on Catalina VM
  macos_build:
    name: macOS
    runs-on: macos-13
    env:
      LABEL: osx
      CC: /usr/local/opt/llvm@15/bin/clang
      CXX: /usr/local/opt/llvm@15/bin/clang++
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
    steps:
      - uses: actions/checkout@v4

      # Checkout repository and submodules
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
     
      # Fetch Dependencies
      - name: Dependencies
        run: |
          brew install --force ccache llvm@15 cmake
         
       # Install Boost
      - name: Install Boost
        run: |    
          curl -OL https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.bz2
          tar -xjf boost_1_80_0.tar.bz2
          cd boost_1_80_0
          ./bootstrap.sh 
          ./b2 
          cd ..

      # Retrieve ccache    
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-osx

       # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '5.12.12'
          host: 'mac'
          target: 'desktop'
          arch: 'clang_64'
          modules: 'debug_info qtcharts qtdatavis3d qtnetworkauth qtpurchasing qtscript qtvirtualkeyboard qtwebengine qtwebglplugin' 

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -D BOOST_ROOT=/Users/runner/work/Infinium/Infinium/boost_1_80_0 -D BOOST_LIBRARYDIR=/Users/runner/work/Infinium/Infinium/boost_1_80_0/stage/lib  -D OPENSSL_ROOT_DIR=/usr/local/opt/openssl -D CMAKE_PREFIX_PATH=/Users/runner/work/Infinium/Qt/5.12.12/clang_64 -D BUILD_GUI=ON -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF ..
      
      # Build for macOS
      - name: Build
        run: |
          cd build
          make
           
       # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="infiniumd connectivity_tool simplewallet"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf Infinium-Gui-${TAG}
          mkdir Infinium-Gui-${TAG}
          cp ${TARGETS} Infinium-Gui-${TAG}/
          tar cvfz Infinium-Gui-${TAG}-${LABEL}.tar.gz Infinium-Gui-${TAG}/
          
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip  
          
      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-Gui-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Infinium-Gui-${{ github.sha }}


                              
  # Windows 10        
  windows_build:
    name: Windows
    runs-on: windows-latest
    env:
      MSBUILD_PATH: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v4

      # Install Clcache
      - name: Setup clcache
        run: pip install clcache

      # Checkout repository and submodules  
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Retrive Clcache
      - name: Retrieve clcache
        uses: actions/cache@v4
        with:
          path: clcache
          key: clcache-windows

      # Install OpenSSL
      - name: Install OpenSSL
        run: choco install openssh

      # Install QT
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.12.12'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2017_64'
          modules: 'debug_info qtcharts qtdatavis3d qtnetworkauth qtpurchasing qtscript qtvirtualkeyboard qtwebengine qtwebglplugin'

      # Install boost
      - name: Install Boost 1.82.0
        run: |
          $link = "https://boost.teeks99.com/bin/1.82.0/boost_1_82_0-msvc-14.3-64.exe"
          $path = "C:\boost.exe"
          [Net.WebClient]::new().DownloadFile($link, $path)
          Start-Process C:\boost.exe -ArgumentList "/DIR=C:\local\boost_1_82_0","/VERYSILENT" -Wait
          Get-ChildItem C:\local\boost_1_82_0

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 -T host=x64 .. -DBUILD_GUI=ON -D CMAKE_PREFIX_PATH=D:\a\Infinium\Qt\5.12.12\msvc2017_64 -D BOOST_ROOT=C:/local/boost_1_82_0 -D BOOST_LIBRARYDIR="C:/local/boost_1_82_0/lib64-msvc-14.1"  -D OPENSSL_ROOT_DIR="C:/Program Files/OpenSSL" -D STATIC=OFF
     
      # Build for Windows
      - name: Build
        run: |
          $env:CLCACHE_DIR = "$env:GITHUB_WORKSPACE\clcache"
          $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
          cd build
          MSBuild infinium.sln /p:Configuration=Release /t:Build

      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src/Release
          rm -rf Infinium-Gui-${TAG}
          mkdir Infinium-Gui-${TAG}
          cp infinium.exe Infinium-Gui-${TAG}/
          D:/a/Infinium/Qt/5.12.12/msvc2017_64/bin/windeployqt.exe Infinium-Gui-${TAG}/infinium.exe
          cp -r ../../../src/gui/qt-daemon/layout/html Infinium-Gui-${TAG}/html       
          7z a Infinium-Gui-${TAG}-${LABEL}.zip Infinium-Gui-${TAG}
          cp ../../../utils/buildings/windows/64bit/setup_64.iss Infinium-Gui-${TAG}
          cp ../../../utils/buildings/windows/64bit/vc_redist.x64.exe Infinium-Gui-${TAG}

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Release/Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.zip
          asset_name: Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.zip
          asset_content_type: application/zip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-Gui-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Release/Infinium-Gui-${{ github.sha }}  
            
      # Compile .ISS to .EXE Installer - No Release
      - name: Compile .ISS to .EXE Installer - No Release
        if: github.event_name != 'release' && !(startsWith(github.ref, 'refs/tags/'))
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: build/src/Release/Infinium-Gui-${{ github.sha }}/setup_64.iss
          options: /O+ /DBinariesPath=..\Infinium-Gui-${{ github.sha }} /O..\Infinium\build\src\Release /FInfinium-Gui-${{ github.sha }}-${{ env.LABEL }}
      
      # Compile .ISS to .EXE Installer - Release
      - name: Compile .ISS to .EXE Installer - Release
        if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: build/src/Release/Infinium-Gui-${{ github.event.release.tag_name }}/setup_64.iss
          options: /O+ /DBinariesPath=..\Infinium-Gui-${{ github.event.release.tag_name }} /O..\Infinium\build\src\Release /FInfinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}
      
      # Upload to GH Actions Artifacts EXE
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-Gui-${{ github.sha }}-${{ env.LABEL }}.exe
          path: ./build/src/Release/Infinium-Gui-${{ github.sha }}-${{ env.LABEL }}.exe

      # Upload to GH Release EXE
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Release/Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.exe
          asset_name: Infinium-Gui-${{ github.event.release.tag_name }}-${{ env.LABEL }}.exe
          asset_content_type: application/octet-stream
