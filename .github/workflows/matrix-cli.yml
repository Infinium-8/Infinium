name: Build CLI
on:
  push:
  pull_request:
  release:
    types: [published]
 
env:
  TAG: ${{ github.ref }}

jobs:
# Common Build matrix for builds on Ubuntu Lasted VM       
  ubuntu_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu 20.04 - GCC 9', 'Ubuntu 20.04 - GCC 10']
        include:
          - build_name: 'Ubuntu 20.04 - GCC 9'
            package_name: 'gcc-9 g++-9'
            cc: gcc-9
            cxx: g++-9
            label: ubuntu-20.04
            deployable: true
          - build_name: 'Ubuntu 20.04 - GCC 10'
            package_name: 'gcc-10 g++-10'
            cc: gcc-10
            cxx: g++-10
            label: ubuntu-20.04-linux-gcc-10
            deployable: false
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt-get install -y curl build-essential python3-dev autotools-dev libicu-dev libbz2-dev cmake git screen checkinstall zlib1g-dev ${{ matrix.package_name }}
          
      # Install Boost
      - name: Install Boost
        run: |
          curl -OL https://boostorg.jfrog.io/artifactory/main/release/1.70.0/source/boost_1_70_0.tar.bz2
          tar -xjf boost_1_70_0.tar.bz2
          cd boost_1_70_0
          ./bootstrap.sh --with-libraries=system,filesystem,thread,date_time,chrono,regex,serialization,atomic,program_options,locale,timer,log
          ./b2
          cd ..

      # Install OpenSSL
      - name: Install OpenSSL
        run: |
          curl -OL https://www.openssl.org/source/openssl-1.1.1n.tar.gz
          tar xaf openssl-1.1.1n.tar.gz 
          cd openssl-1.1.1n/
          ./config --prefix=/home/runner/work/Infinium/Infinium/openssl --openssldir=/home/runner/work/Infinium/Infinium/openssl shared zlib
          make
          make install
          cd ..

      # Install Ccache
      - name: Setup ccache
        run: |
          sudo apt install ccache

      # Retrieve Ccache    
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}     
     
      # Configure the project with cmake
      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake  -D BOOST_ROOT=/home/runner/work/Infinium/Infinium/boost_1_70_0 -D OPENSSL_ROOT_DIR=/home/runner/work/Infinium/Infinium/openssl -D BUILD_GUI=OFF -D STATIC=true -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF ..
      
      # Build for linux
      - name: Build
        run: |
          cd build
          make 
      
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="infiniumd connectivity_tool simplewallet"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf Infinium-${TAG}
          mkdir Infinium-${TAG}
          cp ${TARGETS} Infinium-${TAG}/
          tar cvfz Infinium-${TAG}-${LABEL}.tar.gz Infinium-${TAG}/
      
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Infinium-${{ github.sha }}   

  ubuntu_now_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu 22.04 - GCC 11', 'Ubuntu 22.04 - GCC 12']
        include:
          - build_name: 'Ubuntu 22.04 - GCC 11'
            package_name: 'gcc-11 g++-11'
            cc: gcc-11
            cxx: g++-11
            label: ubuntu-22.04
            deployable: true
          - build_name: 'Ubuntu 22.04 - GCC 12'
            package_name: 'gcc-12 g++-12'
            cc: gcc-12
            cxx: g++-12
            label: ubuntu-22.04-linux-gcc-12
            deployable: false
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt-get install -y curl build-essential python3-dev autotools-dev libicu-dev libbz2-dev cmake git screen checkinstall zlib1g-dev ${{ matrix.package_name }}

      # Install Boost
      - name: Install Boost
        run: |  
          curl -OL https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.tar.bz2
          tar -xjf boost_1_76_0.tar.bz2
          cd boost_1_76_0
          ./bootstrap.sh --with-libraries=system,filesystem,thread,date_time,chrono,regex,serialization,atomic,program_options,locale,timer,log
          ./b2
          cd ..

      # Install OpenSSL
      - name: Install OpenSSL
        run: |     
          curl -OL https://www.openssl.org/source/openssl-1.1.1n.tar.gz
          tar xaf openssl-1.1.1n.tar.gz 
          cd openssl-1.1.1n/
          ./config --prefix=/home/runner/work/Infinium/Infinium/openssl --openssldir=/home/runner/work/Infinium/Infinium/openssl shared zlib
          make
          make install
          cd ..

      # Install Ccache
      - name: Setup ccache
        run: |
          sudo apt install ccache

      # Retrieve ccache
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}     
     
     # Configure the project with cmake
      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake  -D BOOST_ROOT=/home/runner/work/Infinium/Infinium/boost_1_76_0 -D OPENSSL_ROOT_DIR=/home/runner/work/Infinium/Infinium/openssl -D BUILD_GUI=OFF -D STATIC=true -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF ..
      
      # Build for linux
      - name: Build
        run: |
          cd build
          make 
      
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="infiniumd connectivity_tool simplewallet"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf Infinium-${TAG}
          mkdir Infinium-${TAG}
          cp ${TARGETS} Infinium-${TAG}/
          tar cvfz Infinium-${TAG}-${LABEL}.tar.gz Infinium-${TAG}/
     
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Infinium-${{ github.sha }}
   
 
  # Mac builds on Catalina VM
  macos_build:
    name: macOS
    runs-on: macos-12
    env:
      LABEL: osx
      CC: /usr/local/opt/llvm@11/bin/clang
      CXX: /usr/local/opt/llvm@11/bin/clang++
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        run: |
          brew install --force ccache llvm@11
          ls /usr/local/opt/llvm@11/bin

      # Install Boost
      - name: Install Boost
        run: |    
          curl -OL https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.bz2
          tar -xjf boost_1_80_0.tar.bz2
          cd boost_1_80_0
          ./bootstrap.sh 
          ./b2 
          cd ..

      # Retrieve ccache    
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-osx    

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -D BOOST_ROOT=/Users/runner/work/Infinium/Infinium/boost_1_80_0 -D BOOST_LIBRARYDIR=/Users/runner/work/Infinium/Infinium/boost_1_80_0/stage/lib  -D OPENSSL_ROOT_DIR=/usr/local/opt/openssl -D BUILD_GUI=OFF -D CMAKE_BUILD_TYPE=Release  -D BUILD_TESTS=OFF ..
      
      # Build for macOS
      - name: Build
        run: |
          cd build
          make
           
       # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="infiniumd connectivity_tool simplewallet"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf Infinium-${TAG}
          mkdir Infinium-${TAG}
          cp ${TARGETS} Infinium-${TAG}/
          tar cvfz Infinium-${TAG}-${LABEL}.tar.gz Infinium-${TAG}/
          
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip  
          
      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Infinium-${{ github.sha }}

          
  # Windows 10        
  windows_build:
    name: Windows
    runs-on: windows-latest
    env:
      MSBUILD_PATH: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v4

      # Setup clcache
      - name: Setup clcache
        run: pip install clcache

      # Retrieve clcache
      - name: Retrieve clcache
        uses: actions/cache@v4
        with:
          path: clcache
          key: clcache-windows

      # Install OpenSSH
      - name: Install OpenSSH
        run: choco install openssh 

      # Install boost
      - name: Install Boost 1.71.0
        run: |
          $link = "https://boost.teeks99.com/bin/1.71.0/boost_1_71_0-msvc-14.2-64.exe"
          $path = "C:\boost.exe"
          [Net.WebClient]::new().DownloadFile($link, $path)
          Start-Process C:\boost.exe -ArgumentList "/DIR=C:\local\boost_1_71_0","/VERYSILENT" -Wait
          Get-ChildItem C:\local\boost_1_71_0

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 -T host=x64 .. -DBUILD_GUI=OFF -D BOOST_ROOT=C:/local/boost_1_71_0 -D BOOST_LIBRARYDIR="C:/local/boost_1_71_0/lib64-msvc-14.1"  -D OPENSSL_ROOT_DIR="C:/Program Files/OpenSSL" -D STATIC=OFF
      
      # Build for Windows
      - name: Build
        run: |
          $env:CLCACHE_DIR = "$env:GITHUB_WORKSPACE\clcache"
          $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
          cd build
          MSBuild infinium.sln /p:Configuration=Release /t:Build
      
      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src/Release
          rm -rf Infinium-${TAG}
          mkdir Infinium-${TAG}
          cp *.exe Infinium-${TAG}/          
          7z a Infinium-${TAG}-${LABEL}.zip Infinium-${TAG}/

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Release/Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.zip
          asset_name: Infinium-${{ github.event.release.tag_name }}-${{ env.LABEL }}.zip
          asset_content_type: application/zip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Infinium-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Release/Infinium-${{ github.sha }}        
